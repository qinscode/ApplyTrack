name: Deploy ApplyTrack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Enable manual triggering of the workflow

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required to push packages to GHCR



    steps:
      - name: Print all environment variables
        run: printenv

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Environment Info
        run: |
          echo "Node version:"
          node --version
          echo "Pnpm version:"
          pnpm --version
          echo "Docker version:"
          docker --version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with run number for version tracking
            type=raw,value=${{ github.run_number }}
            # Tag as latest only on main branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # Push the image to the registry
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PORT=4173
          # Use GitHub Actions cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Get first image tag
        id: get-image
        run: |
          echo "IMAGE_TAG=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]'):${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Generate .env file
        run: |
          # Create .env file with secrets
          echo "VITE_APP_API_URL=${{ secrets.API_URL_SECRET }}" > .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env
          

      - name: Copy .env file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: .env
          target: ~/applytrack/

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Create directory if it doesn't exist
            mkdir -p ~/applytrack
            cd ~/applytrack
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the image
            docker pull ghcr.io/${{ steps.get-image.outputs.IMAGE_TAG }}
            
            # Stop and remove existing container
            docker stop applytrack-container || true
            docker rm applytrack-container || true
            
            # Run new container
            docker run -d \
              --name applytrack-container \
              -p 4173:3000 \
              --env-file .env \
              --restart unless-stopped \
              ghcr.io/${{ steps.get-image.outputs.IMAGE_TAG }}
            
            # Clean up
            docker system prune -af
            
            # Verify container is running
            if ! docker ps | grep -q applytrack-container; then
              echo "Container failed to start"
              exit 1
            fi
            
            echo "Deployment successful"